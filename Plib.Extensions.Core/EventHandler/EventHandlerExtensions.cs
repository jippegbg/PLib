using System;


namespace PLib.Extensions.Core
{

	/// <summary>
	///     Extensions of the <see cref="EventHandler"/> delegate.
	/// </summary>
	public static class EventHandlerExtensions
	{

		/// <summary>
		///     Raises an event to be handled by the current handler.
		/// </summary>
		/// <param name="me">The current event handler.</param>
		/// <param name="sender">The source of the event.</param>
		public static void RaiseEvent(this EventHandler me, object sender)
		{
			me?.Invoke(sender, null);
		}



		/// <summary>
		///     Raises an event to be handled by the current handler.
		/// </summary>
		/// <param name="me">The current event handler.</param>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">An object that contains no event data.</param>
		public static void RaiseEvent(this EventHandler me, object sender, EventArgs e)
		{
			me?.Invoke(sender, e);
		}



		/// <summary>
		///     Raises an event to be handled by the current handler.
		/// </summary>
		/// <typeparam name="TEventArgs">
		///     The type of the event data generated by the event.
		/// </typeparam>
		/// <param name="me">The current event handler.</param>
		/// <param name="sender">The source of the event.</param>
		public static void RaiseEvent<TEventArgs>(this EventHandler<TEventArgs> me, object sender) where TEventArgs : EventArgs
		{
			me?.Invoke(sender, Activator.CreateInstance<TEventArgs>());
		}



		/// <summary>
		///     Raises the event.
		/// </summary>
		/// <typeparam name="TEventArgs">
		///     The type of the event data generated by the event.
		/// </typeparam>
		/// <param name="me">The current event handler.</param>
		/// <param name="sender">The source of the event.</param>
		/// <param name="e">An object that contains the event data.</param>
		public static void RaiseEvent<TEventArgs>(this EventHandler<TEventArgs> me, object sender, TEventArgs e) where TEventArgs : EventArgs
		{
			me?.Invoke(sender, e);
		}

	}

}
